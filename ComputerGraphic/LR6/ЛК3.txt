ЛК3
    I. Patches
   II. Два варианта интерполяции цвета при выводе отрезка
  III. Растровая развертка выпуклого полигона (с интеррполяцией цвета и без нее)
   IV. Растровая развертка невыпуклого полигона
    V. Наложение текстуры
      V.I. Понятие текстуры, свойства текстуры
     V.II. Генерация изображения для стандартной текстуры
           Черно-белые клеточки 4*4
           Цветные клеточки 4*4
    V.III. Наложение текстуры (текстурирование) при прямоугольном проецировании
     V.IV. Учет числа повторов текстуры
      V.V. Наложение текстуры при перспективном проецировании
     V.VI. Текстурирование на основе интерполяции
   VI. Задания на ЛР 6 и 7
  VII. Литература
 
I. Patches
В задачах текущего курса использование patches неуместно.
Весь вывод осуществляется в массив, например, vp, являющийся моделью буфера кадра.
Цель - реализация некоторых алгоритмов КГ:
- вывод линии;
- заливка полигона с интерполяцией цветов и без;
- z-буфер;
- проецирование;
- наложение текстуры;
- иное.

##import numpy as np
##vp = np.full((300, 300, 3), (170, 170, 170))
##ax.imshow(vp)
# Вывод двух полигонов
import matplotlib.pyplot as plt
import matplotlib.patches
fig, ax = plt.subplots()
fv = [(22, 227), (150, 164), (277, 227), (150, 291)]
plg = plt.Polygon(fv, color = 'm', fill = False) # fill = True
ax.add_patch(plg)
fv = [(v[0], v[1] - 150) for v in fv]
plg = plt.Polygon(fv, color = 'g')
ax.add_patch(plg)
ax.set_xlim(0, 300); ax.set_ylim(0, 300)
plt.axis('off')
plt.show()

V. Наложение текстуры
  V.I. Понятие текстуры, свойства текстуры
   Текстура - это объект, создаваемый на основе растровых данных - карты текстуры.
   Карту текстуры можно:
   - получить программно;
   - загрузить из файла, хранящего изображения;
   - загрузить из файла и модифицировать программно;
   - применить иные подходы.
   Cвойства текстуры:
   - размеры текстуры;
   - система координат текстуры;
   - координаты текстуры (могут задаваться в вершинах полигонов);
   - число повторов текстуры;
   - иные.
 V.II. Генерация изображения для стандартной текстуры

    Черно-белые клеточки 4*4.
    Можно употребить операции
    & - бинарное И (AND)
    1 & 1 = 1
    1 & 0 = 0
    0 & 1 = 0
    0 & 0 = 0
    ^ - бинарное исключающее ИЛИ (XOR)
    1 ^ 1 = 0
    1 ^ 0 = 1
    0 ^ 1 = 1
    0 ^ 0 = 0

W = H = 64 # Размер текстуры равен H * W
img = np.zeros((H, W, 3), dtype = 'uint8')
for i in range(H): # Генерация черно-белой карты текстуры
    for j in range(W):
        img[i, j, :] = (i & 16 ^ j & 16) * 255
plt.axis('off')
plt.imshow(img)
plt.show()

#     Цветные клеточки 4*4.

img = np.full((H, W, 3), 200, dtype = 'uint8')
img[:16, 16:32, :2] = 0   # (0, 0, 200)
img[:16, 48:, 2:] = 0     # (200, 0, 0)
img[16:32, :16, 0] = 0    # (0, 200, 200)
img[16:32, 32:48, 1] = 0  # (200, 0, 200)
img[32:48, 16:32, 2] = 0  # (200, 200, 0)
img[32:48, 48:, 0] = 0    # (0, 200, 200)
img[32:48, 48:, 2] = 0    # (0, 200, 0)
img[48:, :16, :2] = 100   # (100, 100, 200)
img[48:, 32:48, 2:] = 100 # (200, 100, 100)
plt.axis('off')
plt.imshow(img)
plt.show()

V.III. Наложение текстуры (текстурирование) при прямоугольном проецировании
   Подход заключается в следующем:
   - формируется прямоугольник минимальной площади, охватывающий полигон
     (далее габаритный прямоугольник - ГП);
   - карта текстуры виртуально маштабируется до размеров ГП;
   - стороны полигона используются как отсекающие линии:
     остается только часть ГП с картой текстуры, лежащая в границах полигона.
   Рассматривается схема наложения текстуры на полигон при прямоугольном проецировании.
   При таком проецировании 3d-точка P(x, y, z) отобразится на плоскости проекций в виде точки с координатами X, Y

    X = x; Y = y.

    Введем следующие векторы (см. рис.):

    a = P1; e1 = P2 - P1; e2 = P3 - P1.

    Тогда в системе координат u, v координаты произвольной точки полигона
    (координаты текстуры меняются в диапазоне [0, 1])

    p = a + u * e1 + v * e2

    Тогда координаты X, Y этой точки картинной плоскости соответственно равны:

    X = ax + u * e1x + v * e2x;
    Y = ay + u * e1y + v * e2y.

    Решая эту систему относительно u и v, применяя правило Крамера, получим

    u = Δu / Δ; v = Δv / Δ,

    где

    Δ = e1x * e2y - e1y * e2x
    Δu = (X - ax) * e2y - (Y - ay) * e2x
    Δv = (Y - ay) * e1x - (X - ax) * e1y

    Координаты u, v находятся в диапазоне [0, 1].
    Тогда пиксель с координатами X, Y при наложении текстуры, карта которой c размерами 64*64
    хранится массивом img, следует закрасить следующим цветом:

    clr = img[int(64 * v), int(64 * u)]

V.IV. Учет числа повторов текстуры
  Для самостоятельной проработки:
  - tx, ty > 1 (2, 3, 4, 5, ...);
  - tx, ty < 1 (0.75, 0.5, 0.25, ...);
  Ожидаемый результат для tx = ty = 2 и tx = ty = 0.5 см. на рис. *.
  http://www.100byte.ru/python/pyglet_gl/pyglet_gl.html#p6

V.V.   Наложение текстуры при перспективном проецировании
  Получим перспективную проекцию в результате следующих преобразований:

  X = x / z; Y = y / z (*)
  
  n = [e1, e2] - вектор нормали к грани (полигону)

  как и ранее (координаты текстуры меняются в диапазоне [0, 1])

  p = a + u * e1 + v * e2 (**)

  Из (*) и (**):

  X = (ax + u * e1x + v * e2x) / (az + u * e1z + v * e2z)
  Y = (ay + u * e1y + v * e2y) / (az + u * e1z + v * e2z)

  или

  u * (X * e1z - e1x) + v * (X * e2z - e2x) = ax - az * X
  u * (Y * e1z - e1y) + v * (Y * e2z - e2y) = ay - az * Y

  u = Δu / Δ; v = Δv / Δ,

  где

  Δ = X * nx + Y * ny + nz
  Δu = X * mx + Y * my + mz
  Δv = X * lx + Y * ly + lz
  
  где

  m = [e2, a]; l = [a, e1]
  
V.VI. Текстурирование на основе интерполяции
  Линейная интерполяция.
  Квадратичная интерполяция.
  Кубическая интерполяция.

VI. Задания на ЛР 6 и 7.

ЛР 6.
Реализовать растровую развертку выпуклого полигона на случайном фоне, поочередно применяя:
- заливку одним цветом;
- интерполяцию цветов.
Вывод выполнить в массив vp с использованием случайного фона: plt.imshow(vp).

ЛР 7.
Реализовать растровую развертку выпуклого полигона на случайном фоне с наложенной тектурой:
а) текстура генерируется программно;
б) текстура загружается из файла.
Предусмотреть возможность вывода текстуры с числом повторов 0.5, 2 и 3.
Вывод выполнить в массив vp с использованием случайного фона: plt.imshow(vp).

На защите ЛР 6 и 7 задаются вопросы по материалам ЛК 3.

VII. Литература
  1. Шикин Е. В., Боресков А. В. Компьютерная графика.
     Полигональные модели. – М.: Диалог-МИФИ, 2000. – 464 с. 
 
